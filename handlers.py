# handlers.py

import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
from telegram.error import BadRequest
from storage import get_setting, set_setting
from config import BOT_TOKEN

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–º–∏ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é)
with open("topics_list.json", encoding="utf-8") as f:
    TOPICS = json.load(f)
LOWBANK_TOPICS = TOPICS["lowbank"]
GENERAL_TOPICS = TOPICS["general"]

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
MAIN_MENU_TEXT = "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:"
MAIN_MENU_KEYBOARD = [
    [InlineKeyboardButton("‚öôÔ∏è –¢–µ–º–∏ lowbank", callback_data="open:lowbank")],
    [InlineKeyboardButton("‚öôÔ∏è –ó–∞–≥–∞–ª—å–Ω—ñ —Ç–µ–º–∏", callback_data="open:general")],
    [InlineKeyboardButton("üìã –®–ø–∞—Ä–≥–∞–ª–∫–∞", callback_data="show:cheatsheet")],
    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show:stats")]
]
MAIN_MENU_MARKUP = InlineKeyboardMarkup(MAIN_MENU_KEYBOARD)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id,
        text=MAIN_MENU_TEXT,
        reply_markup=MAIN_MENU_MARKUP
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è inline-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    try:
        await query.answer()
    except BadRequest as e:
        logger.debug(f"Answer callback failed: {e}")

    action, *params = query.data.split(":")

    def build_menu(digest):
        items = LOWBANK_TOPICS if digest == "lowbank" else GENERAL_TOPICS
        kb = [
            [InlineKeyboardButton(
                ("‚úÖ " if get_setting(f"{digest}_{theme}") else "‚ùå ") + theme,
                callback_data=f"toggle:{digest}:{theme}"
            )]
            for theme in items
        ]
        kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
        return kb

    try:
        if action == "open":
            digest = params[0]
            kb = build_menu(digest)
            label = "lowbank" if digest == "lowbank" else "–∑–∞–≥–∞–ª—å–Ω–∏–π"
            await query.edit_message_text(
                text=f"*–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º –¥–ª—è {label}-–¥–∞–π–¥–∂–µ—Å—Ç—É:*",
                reply_markup=InlineKeyboardMarkup(kb),
                parse_mode=ParseMode.MARKDOWN
            )

        elif action == "toggle":
            digest, theme = params
            key = f"{digest}_{theme}"
            set_setting(key, not get_setting(key))
            kb = build_menu(digest)
            label = "lowbank" if digest == "lowbank" else "–∑–∞–≥–∞–ª—å–Ω–∏–π"
            await query.edit_message_text(
                text=f"*–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º –¥–ª—è {label}-–¥–∞–π–¥–∂–µ—Å—Ç—É:*",
                reply_markup=InlineKeyboardMarkup(kb),
                parse_mode=ParseMode.MARKDOWN
            )

        elif action == "back":
            await query.edit_message_text(
                text=MAIN_MENU_TEXT,
                reply_markup=MAIN_MENU_MARKUP
            )

        elif action == "show" and params[0] == "cheatsheet":
            # –®–ø–∞—Ä–≥–∞–ª–∫–∞
            text = "*–®–ø–∞—Ä–≥–∞–ª–∫–∞ —Ç–µ–º:*\n\n"
            text += "*–¢–µ–º–∏ lowbank:*\n" + "\n".join(f"- {t}" for t in LOWBANK_TOPICS) + "\n\n"
            text += "*–ó–∞–≥–∞–ª—å–Ω—ñ —Ç–µ–º–∏:*\n" + "\n".join(f"- {t}" for t in GENERAL_TOPICS)
            kb = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(kb),
                parse_mode=ParseMode.MARKDOWN
            )

        elif action == "show" and params[0] == "stats":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            lines = []
            for digest, items in [("lowbank", LOWBANK_TOPICS), ("general", GENERAL_TOPICS)]:
                cnt = sum(get_setting(f"{digest}_{t}") for t in items)
                lines.append(f"{digest.capitalize()}: {cnt}/{len(items)} —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
            text = "*–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:*\n" + "\n".join(lines)
            kb = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(kb),
                parse_mode=ParseMode.MARKDOWN
            )
    except BadRequest as e:
        logger.debug(f"Edit message failed: {e}")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
